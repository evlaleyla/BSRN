#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/wait.h>
#include <signal.h>
#include <string.h>
#include <fcntl.h>
#include <time.h>
#include <syslog.h>
#include <sys/sysinfo.h>

void starte_daemon()
{
    int session;
    pid_t pid = fork(); // Erstelle einen Kindprozess

    if (pid < 0)
    {
        perror("Fehler beim Starten des Daemons\n");
        FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
        fprintf(log_file, "Fehler beim Starten des Daemons\n");
        fclose(log_file);
        exit(1);
    }

    if (pid == 0)
    {
        session = setsid(); // Erstelle eine neue Sitzung. Kindprozess wird zum Sitzungsführer

        if (session < 0)
        {
            perror("Fehler beim Erstellen einer neuen Sitzung\n");
            FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
            fprintf(log_file, "Fehler beim Erstellen einer neuen Sitzung\n");
            fclose(log_file);
            exit(1);
        }
        if (session >= 0)
        {
            printf("Neue Session wurde erstellt. Die Session-ID %d\n", session);
            FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
            fprintf(log_file, "Neue Session wurde erstellt\n");
            fclose(log_file);
        }
        char *arguments[] = {"/home/evlaleyla/Schreibtisch/BSRN Projekt/samstag.c", NULL};

        if (execvp("/home/evlaleyla/Schreibtisch/BSRN Projekt/helloworld", arguments) < 0) // Verkettung von Prozessen mit exec()
        {
            perror("Fehler beim Ausführen des Programms\n");
            FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
            fprintf(log_file, "Fehler beim Ausführen des Programms\n");
            fclose(log_file);
            exit(1);
        }
    }

    signal(SIGHUP, SIG_IGN); // Ignoriere Sighup

    // Verzeichniswechsel
    if (chdir("/") < 0)
    {
        perror("Fehler beim Verzeichniswechsel\n");
        FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
        fprintf(log_file, "Fehler beim Verzeichniswechsel\n");
        fclose(log_file);
        exit(1);
    }

    // Überprüfen, ob das Programm bereits mit Superuser-Rechten ausgeführt wird
    if (getuid() == 0)
    {
        printf("Das Programm wird bereits mit Superuser-Rechten ausgeführt.\n");
        FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
        fprintf(log_file, "Das Programm wird bereits mit Superuser-Rechten ausgeführt\n");
        fclose(log_file);
    }
    if (setuid(0) == 0)
    {
        printf("Superuser-Rechte erfolgreich erhalten.\n");
        FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
        fprintf(log_file, "Superuser-Rechte erfolgreich erhalten\n");
        fclose(log_file);
    }

    umask(077); // Setze die Zugriffsrechte für Dateien

    // Startzeit ermitteln
    time_t rawtime;
    struct tm *timeinfo;
    char buffer[80];

    time(&rawtime);
    timeinfo = localtime(&rawtime);

    strftime(buffer, sizeof(buffer), "%Y-%m-%d %H:%M:%S", timeinfo);
    printf("Daemon wurde gestartet um: %s\n", buffer);
    FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
    fprintf(log_file, "Daemon wurde gestartet um: %s\n", buffer);
    fclose(log_file);
}

void ueberpruefe_datei_vorhanden()
{
    FILE *pid_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/log.txt", "w");
    if (!pid_file)
    {
        perror("Fehler beim Finden der PID-Datei\n");
        FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
        fprintf(log_file, "Fehler beim Finden der PID-Datei\n");
        fclose(log_file);
        exit(1);
    }
    else
    {
        fprintf(pid_file, "%d", getpid()); // Schreibe die PID des aktuellen Prozesses in die Datei
    }
    fclose(pid_file);
    FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
    fprintf(log_file, "Datei ist vorhanden.\n");
    fclose(log_file);
}

void ueberpruefe_daemon_status()
{
    FILE *pid_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/log.txt", "r");
    if (!pid_file)
    {
        perror("Fehler beim Lesen der PID-Datei\n");
        FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
        fprintf(log_file, "Fehler beim Lesen der PID-Datei\n");
        fclose(log_file);
        exit(1);
    }
    pid_t pid;
    fscanf(pid_file, "%d", &pid);
    fclose(pid_file);
    if (kill(pid, 0) == 0)
    {
        printf("Daemon laeuft (PID: %d)\n", pid);
        FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
        fprintf(log_file, "Daemon laeuft (PID: %d)\n", pid);
        fclose(log_file);
    }
    else
    {
        printf("Daemon ist nicht aktiv\n");
        FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
        fprintf(log_file, "Daemon ist nicht aktiv.\n");
        fclose(log_file);
        exit(1);
    }
}

void speichereProzessinformationen()
{
    pid_t pid = getpid(); // Prozess ID
    uid_t uid = getuid(); // Benutzer ID
    gid_t gid = getgid(); // Gruppen ID

    //Rechte erhalten
    mode_t mode = umask(0);
    umask(mode);
    printf("Rechte: %o\n", mode);

    // CPU-Zeit
    clock_t cpu_zeit = clock();
    double cpu_seconds = (double)cpu_zeit / CLOCKS_PER_SEC;
    printf("CPU-Zeit: %.2f Sekunden\n", cpu_seconds);

    // RAM-Ausnutzung
    char statm_path[64];
    sprintf(statm_path, "/proc/%d/statm", pid);

    int statm_fd = open(statm_path, O_RDONLY);
    if (statm_fd != -1)
    {
        char buffer[256];
        ssize_t bytesRead = read(statm_fd, buffer, sizeof(buffer) - 1);
        close(statm_fd);

        if (bytesRead > 0)
        {
            buffer[bytesRead] = '\0';
            unsigned long size, resident, share, text, lib, data, dt;
            sscanf(buffer, "%lu %lu %lu %lu %lu %lu %lu", &size, &resident, &share, &text, &lib, &data, &dt);

            // Schreiben der Informationen in die log.txt Datei
            FILE *pid_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/log.txt", "w");
            if (pid_file != NULL)
            {
                fprintf(pid_file, "Prozess ID: %d\n", pid);
                fprintf(pid_file, "Benutzer ID: %d\n", uid);
                fprintf(pid_file, "GruppenID: %d\n", gid);
                // fprintf(pid_file, "Prozessrechte: %o\n", info.prozess_rechte);
                fprintf(pid_file, "RAM Ausnutzung:\n");
                fprintf(pid_file, "Gesamtgröße der RAM Ausnutzung: %.2f MB\n", (float)size / 1024);
                fprintf(pid_file, "Resident: %.2f MB\n", (float)resident / 1024);
                fprintf(pid_file, "Shared: %.2f MB\n", (float)share / 1024);
                fprintf(pid_file, "Text: %.2f MB\n", (float)text / 1024);
                fprintf(pid_file, "Bibliotheken: %.2f MB\n", (float)lib / 1024);
                fprintf(pid_file, "Daten: %.2f MB\n", (float)data / 1024);
                fprintf(pid_file, "Datenseiten (Dirty): %.2f MB\n", (float)dt / 1024);
                // fprintf("CPU-Zeit: %.2f Sekunden\n", cpu_seconds);
                fclose(pid_file);
            }
            else
            {
                printf("Fehler beim Öffnen der Ausgabedatei.\n");
            }
        }
    }
    else
    {
        printf("Fehler beim Lesen der RAM-Ausnutzung.\n");
    }
    FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
    fprintf(log_file, "\nDaemon gestartet (PID: %d)\n", getpid());
    fclose(log_file);
}

void ausgeben_der_Infos()
{
    ueberpruefe_daemon_status();
    int daemonInformationen;

    printf("Möchten Sie Informationen erhalten? Wenn Ja, dann tippen Sie bitte '1', wenn Nein, dann tippen Sie '0'.\n");
    scanf("%d", &daemonInformationen);

    if (daemonInformationen == 1)
    {
        FILE *pid_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/log.txt", "r");
        if (!pid_file)
        {
            printf("Fehler beim Öffnen der Datei.\n");
            FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
            fprintf(log_file, "Fehler beim Öffnen der Datei.\n");
            fclose(log_file);
            exit(1);
        }
        char puffer[256]; // angenommene maxiale zeilenlänge

        while (fgets(puffer, sizeof(puffer), pid_file) != NULL)
        {
            printf("%s", puffer);
        }
        fclose(pid_file);
    }
    else if (daemonInformationen == 0)
    {
        printf("Die Informationen wurden gespeichert, Sie werden aber nicht ausgegeben.\n");
    }
}

void daemon_ausfuehren()
{
    int running = 1;
    int daemonBeenden;
    while (running)
    {
        // Daemon protokolliert
        FILE *log_file = fopen("/home/evlaleyla/Schreibtisch/BSRN Projekt/logdatei.log", "a");
        fprintf(log_file, "Der Daemon laeuft orndungsgemaeß weiter.\n");
        fprintf(log_file, "Daemon schlaeft...\n");
        fclose(log_file);
        printf("Warten Sie einen kurzen Moment..\n");
        sleep(5); // Warte für 5 Sekunden

        // Überprüfe, ob der Daemon beendet werden soll
        printf("Wenn Sie moechte dass der Daemon weiterlaeuft, dann druecken Sie bitte die \"1\". \nWenn Sie moechten dass der Daemon beendet wird, dann geben sie im Terminal bitte \"kill -15 <pid>\" ein.\n");
        scanf("%d", &daemonBeenden);
        if (daemonBeenden == 1)
        {
            running = 1;
        }
        else
        {
            printf("Falsche Einfabe.\n");
        }
    }
}

int main()
{
    int daemonStart;
    int daemonInformationen;

    // Menue
    printf("Wollen Sie einen Daemon starten?\nGeben Sie bitte \"1\" ein, damit ein Daemon gestartet wird.\nGeben Sie bitte \"0\" ein, damit kein Daemon gestartet wird.");
    scanf("%d", &daemonStart);
    switch (daemonStart)
    {
    case 1:
        ueberpruefe_datei_vorhanden();
        starte_daemon();
        speichereProzessinformationen();
        ausgeben_der_Infos();
        daemon_ausfuehren();
        break;
    case 0:
        printf("Eingabe gespeichert. Der Daemon wird nicht gestartet.\n");
        break;
    default:
        printf("Falsche Eingabe");
        break;
    }
    closelog(); // Schließe den syslog
    return 0;
}
